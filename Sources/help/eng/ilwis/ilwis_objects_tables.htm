<html>

<head>
<title>ILWIS objects : tables</title>
<meta name="author" content="Petra Budde, Raymond Nijmeijer">
<meta name="keywords" content="Data objects, ILWIS objects, Tables, TBT">
<link rel=stylesheet type="text/css" href="../ilwis.css">
<SCRIPT TYPE="text/javascript"> 
 <!-- 
 function popup(mylink, windowname) 
 { 
 if (! window.focus)return true; 
 var href; 
 if (typeof(mylink) == 'string') 
    href=mylink; 
 else 
   href=mylink.href; 
window.open(href, windowname, 'width=500,height=400,scrollbars=yes'); 

return false;
}
//-->
</SCRIPT>
</head>
<body text="#000000" bgcolor="#FFFFFF">

<table cellpadding="0" cellspacing="0" width="100%">
<tr>
<td><h1 class=firstline>ILWIS objects</h1></td>
</tr>
<tr><td class=emptylinehalf><h1>&nbsp;</h1></td></tr>
<tr>
<td><h1 class=secondline>Tables&nbsp;&nbsp;&nbsp;&nbsp;<img src="../images/table.gif" align=bottom width="13" height="14"></h1></td>
</tr>
<tr><td class=emptylinehalf><h1>&nbsp;</h1></td></tr>
<tr><td class=emptylinehalf>&nbsp;</td></tr>
</table>

<!--<hr>-->

<p class=defnewpar>A table is a <a href="ilwis_objects_data_objects.htm">data object</a> storing <a href="..//ilwis/popup/objects_column_popup.htm" onClick="return popup(this, 'notes')" >columns</a>. A table usually contains tabular information which refers existing geographic information stored in maps. The table then contains extra information on the mapping units, polygons, segments or points in your maps, for instance cadastral information, soil information, etc. Such a table is called an <a href="..//ilwis/popup/objects_table_popup.htm" onClick="return popup(this, 'notes')" >attribute table</a>. Raster, polygon, segment and point maps with a class or ID <a href="..//ilwis/popup/objects_domains_ilwobj_popup.htm" onClick="return popup(this, 'notes')" >domain</a> can have an attribute table. The domain of an attribute table should always be the same as the domain of the map to which the table relates. </p>

<p class=defnewpar>Further, tables may store columns that contain the answers of an operation on a map, for instance an output cross table or output tables of a statistical operation. The domain of a table generated by an operation may be created by the operation itself or the table may use domain <span class=courier>None</span>. Tables that use domain <span class=courier>None</span> cannot be linked to a map. </p>

<p class=defnewpar>Tables can be displayed and edited in a <a href="..//ilwis/popup/table_window_popup.htm" onClick="return popup(this, 'notes')" >table window</a>. A table window also offers you the possibility to display graphs. You can calculate with the columns in a table by typing a <a href="..//ilwis/popup/table_calculation_popup.htm" onClick="return popup(this, 'notes')" >Table Calculation formula</a> on the <a href="..//ilwis/popup/command_line_table_window_popup.htm" onClick="return popup(this, 'notes')" >command line of a table window</a>. For more complicated calculations, you can use the Columns menu in the table window.</p>

<p class=kopje>Contents and structure of a table:</p>

<p>A table consists of records and columns. The smallest unit in a table is called a field. </p>

<p class=defnewpar><b>Record names</b> in a table are defined by the <a href="..//ilwis/popup/objects_domains_intro_popup.htm" onClick="return popup(this, 'notes')" >domain</a> of the table.</p>

<ul>

<li>	In a table window which displays a table, record names appear on (gray) record buttons that are arranged along the left side of the table.</li>

<li>	Attribute tables use the same class or ID domain as the map to which they refer. When, for instance, you have an attribute table for a soil map (both using class domain <span class=courier>Soils</span>), then the classes of that domain appear as units in the map and as records in the attribute table. Or, when you have an attribute table for a map with cadastral plots (both using ID domain <span class=courier>City</span>), then the IDs of that domain appear as units in the map and as records in the table. <br>
        
        Attributes on the classes or identifiers in a map are stored in attribute columns which have their own domain (class, ID, or value), see below.</li>

<li>	Tables cannot have a value domain because conceptually spoken you cannot have extra information on value maps; extra tabular information on maps that represent interpolated height values, measured rainfall figures, or the calculated total number of people per building block, etc. does not exist.</li>

<li>	A table that uses domain <span class=courier>None</span> cannot be linked to a map. Records in a table that uses domain <span class=courier>None</span> are simply identified by record numbers.</li>

</ul>

<p class=defnewpar><b>Columns</b> in a table have a name, a description, and each column uses a <a href="..//ilwis/popup/objects_domains_ilwobj_popup.htm" onClick="return popup(this, 'notes')" >domain</a>. </p>

<ul>

<li>	In a table which displays a table, column names appear on (gray) column buttons that are arranged along the top of the table, just below the command line and the menu bar.</li>

<li>	The domain of each column depends on the kind of data you want to store in that column: select or create for example a value domain if you want store pH values for your soil classes or the <span class=courier>String</span> domain if you want to store a text-description for each soil class.</li>

<li>	You can add as many columns to a table as you like. Also by performing calculations, you can obtain new columns. </li>

<li>	When a column uses a value domain, the column also has a <a href="..//ilwis/popup/y_value_range_popup.htm" onClick="return popup(this, 'notes')" >value range</a> and a <a href="..//ilwis/popup/y_precision_popup.htm" onClick="return popup(this, 'notes')" >precision</a>.</li>

<li>	Optionally, the domain of a column may have a <a href="..//ilwis/popup/objects_representation_popup.htm" onClick="return popup(this, 'notes')" >representation</a>, which is handy in case you wish to display a map that has an attribute table by one of the attributes, i.e. using the <span class=arial>Attribute</span> check box in the Display Options dialog box of that map.</li>

<li>	If a table has a certain domain that also exists in another table, or if a column of a table has a certain domain that also exists in another table, then you can join columns of the other table into the current table. </li>

</ul>

<p>For more information on columns, see <a href="ilwis_objects_columns.htm">ILWIS objects : columns</a>.</p>

<p class=kopje>Names of tables:</p>

<p>In ILWIS 3, <a href="..//ilwis/popup/object_name_popup.htm" onClick="return popup(this, 'notes')" >object names</a> comply with Windows long file names. Also Universal Naming Convention (UNC) paths are supported. For more information, see <a href="../ilwis/how_to_use_long_object_names.htm">How to use long object names</a>.</p>

<p class=kopje>To create a table:</p>

<p>The easiest way to create an attribute table is to open the <a href="..//ilwis/popup/object_properties_popup.htm" onClick="return popup(this, 'notes')" >Properties</a> dialog box of a map, and then select the <span class=arial>Attribute</span> check box in the dialog box. Subsequently, create the table by clicking the little <a href="..//ilwis/popup/win_create.htm" onClick="return popup(this, 'notes')" >create button</a> that appears next to the <span class=arial>Attribute</span> drop-down list box. The Create Table dialog box appears in which you can specify a name and description for the table. The domain of the table is already filled out and is the same domain that is used by the map. For other methods, see <a href="../ilwis/how_to_create_tables.htm">How to create a table</a>.</p>

<p>When you create a table with domain <span class=courier>None</span>, the table cannot be linked to a map.</p>

<p class=kopje>To display and edit a table:</p>

<p>The easiest way to open and edit existing tables is to double-click a table in the <a href="..//ilwis/popup/catalog_popup.htm" onClick="return popup(this, 'notes')" >Catalog</a>; the table is shown in a <a href="..//ilwis/popup/table_window_popup.htm" onClick="return popup(this, 'notes')" >table window</a>. For other methods of opening tables, see <a href="how_to_display_maps_and_tables.htm">How to display maps and tables</a>.</p>

<p class=defnewpar>In a table window, a table can be displayed and edited in the table viewer and in record view: the table viewer gives you an overview of the whole table, and record view displays the contents of a certain record. For more information, see <a href="../ilwis/how_to_edit_tables.htm">How to edit a table</a>. It is not possible to edit the fields of dependent and read-only columns or the fields of table-owned columns in dependent tables. Table information can also be shown as graphs. </p>

<p class=defnewpar>When an attribute table is linked to a map or to its domain, and the map is displayed in a map window, you can also double-click in the map to edit the attributes in the attribute table. For more information on the double-click action, see <a href="../ilwis/map_window_functionality_advanced.htm">Map window : advanced functionality</a>.</p>

<p class=kopje>Operations on tables:</p>

<p>Calculations within tables are usually performed on columns. You can calculate with columns by typing a <a href="calc.htm">Table Calculation</a> formula on the <a href="..//ilwis/popup/command_line_table_window_popup.htm" onClick="return popup(this, 'notes')" >command line of a table window</a>. When the definition symbol = is used in a calculation, the output column is <a href="..//ilwis/popup/object_dependent_data_objects_popup.htm" onClick="return popup(this, 'notes')" >dependent</a>. For more complicated column operations such as aggregations, calculating cumulative values, joins, and least square fit calculations, you can use the Columns menu. For more information on columns, see <a href="ilwis_objects_columns.htm">ILWIS objects : columns</a>.</p>

<p class=defnewpar>When a table is the result of an operation such as the <a href="..//ilwisapp/popup/cross_popup.htm" onClick="return popup(this, 'notes')" >Cross</a> operation or the statistical operations, the table itself is dependent and the columns created by the operation are table-owned. For more information on dependent objects, see <a href="basic_concepts_dependent_data_objects.htm">Basic concepts : dependent data objects</a>. </p>

<p class=defnewpar>Operations that can be performed on a table as a whole are listed on the <a href="../ilwis/main_window_menu_commands.htm">Operations, Table Operations menu</a> in the Main window:</p>

<ul>

<li>	The <a href="..//ilwisapp/popup/transpose_table_popup.htm" onClick="return popup(this, 'notes')" >Transpose Table</a> operation can be used to switch all records to columns and all columns to records. </li>

<li>	The <a href="..//ilwisapp/popup/table_to_point_map_popup.htm" onClick="return popup(this, 'notes')" >Table to Point map</a> operation can be used to create a point map from a table. The table should contain at least columns with X- and Y-coordinates for the points.</li>

<li>	The <a href="..//ilwisapp/popup/change_domain_of_table_popup.htm" onClick="return popup(this, 'notes')" >Change domain of table</a> operation can be used to create a new table which uses another domain than the current table. </li>

</ul>

<p class=kopje>Technical information:</p>

<p>A table consists of an ASCII <a href="..//ilwis/popup/object_definition_files_popup.htm" onClick="return popup(this, 'notes')" >object definition file</a> (.TBT) and a binary data file (.TB#). The object definition file of a table stores the table name, table description, whether the table is dependent or not, the number of columns in the table, column names, column descriptions, and for dependent columns the column definitions, etc. Further, the object definition file contains references to the table's <a href="..//ilwis/popup/objects_domains_ilwobj_popup.htm" onClick="return popup(this, 'notes')" >domain</a>, the table's data file, and the domains that are used by the individual columns. The .TB# file stores the data of the columns.</p>

<p class=defnewpar>By viewing the <a href="..//ilwis/popup/object_properties_popup.htm" onClick="return popup(this, 'notes')" >properties</a> of a table, you can see which domain the table is using and whether the table is dependent or not. For dependent tables, you can manage dependencies: break dependencies, make dependent tables up-to-date, delete the dependent table's data file, etc. For more information, see <a href="basic_concepts_properties_of_objects.htm">Basic concepts : properties of objects</a>.</p>

<p class=kopje>Limitations:</p>

<p>In principle, the maximum number of columns in a table is 32000 and the maximum number of records in a table is 2 billion. In practice however, limitations will occur by available memory. Furthermore, ILWIS is not designed to work with very large data sets: to speed up processing you may need to split tables into smaller logical parts.</p>

<p class=Seealso>See also:</p>

<p class=seealsolinks><a href="../ilwis/how_to_create_tables.htm">How to create a table</a></p>

<p class=seealsolinks><a href="../ilwis/how_to_edit_tables.htm">How to edit a table</a></p>

<p class=seealsolinks><a href="../ilwis/table_window_functionality.htm">Table window : functionality</a></p>

<p class=seealsolinks><a href="calc.htm">Table calculation</a></p>

<p class=seealsolinks><a href="ilwis_objects_columns.htm">ILWIS objects : columns</a></p>

</body